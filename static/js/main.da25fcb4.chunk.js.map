{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","api","useState","query","setQuery","weather","settemp","dateBuilder","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","key","fetch","then","res","json","result","console","log","Date","name","sys","country","Math","round","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OA8FeA,MA3Ff,WACE,IAAMC,EACC,mCADDA,EAEE,2CAER,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA2BF,mBAAS,IAApC,mBAAOG,EAAP,KAAgBC,EAAhB,KAcMC,EAAc,SAACC,GACnB,IAGIC,EADO,CAAC,SAAU,UAAW,YAAa,WAAY,SAAU,YACrDD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,MAAO,MAAO,QAAS,QAAS,MAAO,MAAO,MAAO,MAAO,MAAO,MACnE,MAAO,OAIFL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,IAEpC,OACE,yBAAKE,UAAmC,oBAAhBZ,EAAQa,MAAyBb,EAAQa,KAAKC,KAAO,GAAM,WAA2B,YAC5G,8BACE,yBAAKF,UAAU,aACb,2BAAOG,KAAO,OACdH,UAAU,YACVI,YAAY,WACZC,SAAU,SAAAC,GAAC,OAAInB,EAASmB,EAAEC,OAAOC,QACjCA,MAAOtB,EACPuB,WAhCO,SAAAH,GACC,UAAVA,EAAEI,KACFC,MAAM,GAAD,OAAI3B,EAAJ,qBAAyBE,EAAzB,+BAAqDF,IACzD4B,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ1B,EAAQ0B,GACR5B,EAAS,IACT6B,QAAQC,IAAIF,UA6BY,qBAAjB3B,EAAQa,KACjB,6BAEE,yBAAKD,UAAU,eACb,yBAAKA,UAAU,YACf,uBAAGA,UAAU,QAAb,0BACuB,8BAFvB,sBAKA,yBAAKA,UAAU,QACVV,EAAY,IAAI4B,QAGvB,yBAAKlB,UAAU,cACb,yBAAKA,UAAU,QAAf,WAGA,yBAAKA,UAAU,WAAf,WAMF,6BACE,yBAAKA,UAAU,eACb,yBAAKA,UAAU,YACVZ,EAAQ+B,KADb,KACqB/B,EAAQgC,IAAIC,SAEjC,yBAAKrB,UAAU,QACVV,EAAY,IAAI4B,QAGvB,yBAAKlB,UAAU,cACb,yBAAKA,UAAU,QACZsB,KAAKC,MAAMnC,EAAQa,KAAKC,MAD3B,SAGA,yBAAKF,UAAU,WACZZ,EAAQA,QAAQ,GAAGa,WCxErBuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.da25fcb4.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport './App.css';\n\nfunction App() {\n  const api = {\n    key: \"459f8614d771b01d9e2b69738d96adc6\",\n    base: \"https://api.openweathermap.org/data/2.5/\"\n  }\n  const [query, setQuery] = useState('');\n  const [weather, settemp] = useState({});\n\n  const search = e => {\n    if (e.key === \"Enter\"){\n        fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          settemp(result);\n          setQuery(\"\");\n          console.log(result);\n        })\n    }\n  }\n  \n  const dateBuilder = (d) => {\n    let months = [\"Jan\", \"Feb\", \"March\", \"April\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\",\n                  \"Nov\", \"Dec\"];\n    let days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n  return (\n    <div className={(typeof weather.main != \"undefined\") ? ((weather.main.temp > 16) ? \"app warm\" : \"app cold\") : \"app cold\"}>\n      <main>\n        <div className=\"searchbox\">\n          <input type = \"text\" \n          className=\"searchbar\" \n          placeholder=\"Location\" \n          onChange={e => setQuery(e.target.value)}\n          value={query}\n          onKeyPress={search}>\n\n          </input>\n        </div>\n        {(typeof weather.main === \"undefined\") ? (\n        <div>\n          \n          <div className=\"locationbox\">\n            <div className=\"location\">\n            <p className=\"date\">\n            No Location Selected ! <br></br></p>\n                New York City, USA\n            </div>\n            <div className=\"date\">\n                {dateBuilder(new Date())}\n            </div>\n          </div>\n          <div className=\"weatherbox\">\n            <div className=\"temp\">\n              15°C\n            </div>\n            <div className=\"weather\">\n              Sunny\n            </div>\n          </div>\n        </div>\n        ) : (\n          <div>\n            <div className=\"locationbox\">\n              <div className=\"location\">\n                  {weather.name}, {weather.sys.country}\n              </div>\n              <div className=\"date\">\n                  {dateBuilder(new Date())}\n              </div>\n            </div>\n            <div className=\"weatherbox\">\n              <div className=\"temp\">\n                {Math.round(weather.main.temp)}°C\n              </div>\n              <div className=\"weather\">\n                {weather.weather[0].main}\n              </div>\n            </div>\n          </div>\n          ) }\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}